/*
	Copyright (C) 2021 Arc, tomichec (Tomas Stary)

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
#include "cashback.h"

namespace cashback {

	LnurlSignerConfig lnurl_config;
	std::string description;

	void init (){
		description = config::get_lnbits_description();

		lnurl_config.apiKey.id = config::get_lnurl_api_key_id();
		lnurl_config.apiKey.key = config::get_lnurl_api_key();
		lnurl_config.callbackUrl = config::get_lnurl_callback_url();
		lnurl_config.fiatCurrency = config::get_currency();

		lnurl_config.apiKey.encoding = "hex";
		lnurl_config.shorten = true;
	}

	std::string signer(double amount_fiat) {
		// Prepare an instance of the signer class.
		LnurlSigner signer(lnurl_config);
		// Prepare lnurl-withdraw parameters.
		LnurlWithdrawParamsFiat params;
		params.minWithdrawable = amount_fiat;
		params.maxWithdrawable = amount_fiat;
		params.defaultDescription = description;
		// Optionally add your own custom parameters:
		// params.custom["custom1"] = "custom parameter";
		// params.custom["custom2"] = "another custom parameter";
		// Generate a nonce.
		// (Pseudo-)randomly generated number and a timestamp should be sufficient.
		const std::string nonce = generate_nonce();
		// Create the signed URL.
		const std::string output = signer.create_url(params, nonce);
		// Serial.println(output.c_str());

		return output;
	}

	std::string encode(std::string input) {
		const std::string output = Lnurl::encode(input);
		return output;
	}

	std::string get_lnurl(double amount_fiat) {
		std::string signed_url = signer(amount_fiat);
		std::string output = encode(signed_url);
		// Serial.println(output.c_str());

		return output;		
	}

	// from baby Bleskomat
	std::string generate_nonce() {
		std::ostringstream ss;
		// Random numbers generated by esp_random are probably sufficient.
		// But just to be safe let's append the current time in microseconds as well.
		const auto ms = std::chrono::high_resolution_clock::now().time_since_epoch().count() / 1000;
		ss << esp_random() << "_" << ms;
		return ss.str();
	}

}
